// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'network_exception.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$NetworkException {
  int get statusCode => throw _privateConstructorUsedError;
  ErrorBean? get error => throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;

  @JsonKey(ignore: true)
  $NetworkExceptionCopyWith<NetworkException> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $NetworkExceptionCopyWith<$Res> {
  factory $NetworkExceptionCopyWith(
          NetworkException value, $Res Function(NetworkException) then) =
      _$NetworkExceptionCopyWithImpl<$Res, NetworkException>;
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class _$NetworkExceptionCopyWithImpl<$Res, $Val extends NetworkException>
    implements $NetworkExceptionCopyWith<$Res> {
  _$NetworkExceptionCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_value.copyWith(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ) as $Val);
  }

  @override
  @pragma('vm:prefer-inline')
  $ErrorBeanCopyWith<$Res>? get error {
    if (_value.error == null) {
      return null;
    }

    return $ErrorBeanCopyWith<$Res>(_value.error!, (value) {
      return _then(_value.copyWith(error: value) as $Val);
    });
  }
}

/// @nodoc
abstract class _$$DefaultErrorImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$DefaultErrorImplCopyWith(
          _$DefaultErrorImpl value, $Res Function(_$DefaultErrorImpl) then) =
      __$$DefaultErrorImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$DefaultErrorImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$DefaultErrorImpl>
    implements _$$DefaultErrorImplCopyWith<$Res> {
  __$$DefaultErrorImplCopyWithImpl(
      _$DefaultErrorImpl _value, $Res Function(_$DefaultErrorImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$DefaultErrorImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$DefaultErrorImpl implements DefaultError {
  const _$DefaultErrorImpl({this.statusCode = 000, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.defaultError(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DefaultErrorImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$DefaultErrorImplCopyWith<_$DefaultErrorImpl> get copyWith =>
      __$$DefaultErrorImplCopyWithImpl<_$DefaultErrorImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return defaultError(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return defaultError?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (defaultError != null) {
      return defaultError(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return defaultError(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return defaultError?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (defaultError != null) {
      return defaultError(this);
    }
    return orElse();
  }
}

abstract class DefaultError implements NetworkException {
  const factory DefaultError({final int statusCode, final ErrorBean? error}) =
      _$DefaultErrorImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$DefaultErrorImplCopyWith<_$DefaultErrorImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MovedPermanentlyImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$MovedPermanentlyImplCopyWith(_$MovedPermanentlyImpl value,
          $Res Function(_$MovedPermanentlyImpl) then) =
      __$$MovedPermanentlyImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$MovedPermanentlyImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$MovedPermanentlyImpl>
    implements _$$MovedPermanentlyImplCopyWith<$Res> {
  __$$MovedPermanentlyImplCopyWithImpl(_$MovedPermanentlyImpl _value,
      $Res Function(_$MovedPermanentlyImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$MovedPermanentlyImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$MovedPermanentlyImpl implements MovedPermanently {
  const _$MovedPermanentlyImpl(
      {this.statusCode = HttpResponseCode.movedPermanently, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.movedPermanently(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MovedPermanentlyImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$MovedPermanentlyImplCopyWith<_$MovedPermanentlyImpl> get copyWith =>
      __$$MovedPermanentlyImplCopyWithImpl<_$MovedPermanentlyImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return movedPermanently(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return movedPermanently?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (movedPermanently != null) {
      return movedPermanently(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return movedPermanently(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return movedPermanently?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (movedPermanently != null) {
      return movedPermanently(this);
    }
    return orElse();
  }
}

abstract class MovedPermanently implements NetworkException {
  const factory MovedPermanently(
      {final int statusCode, final ErrorBean? error}) = _$MovedPermanentlyImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$MovedPermanentlyImplCopyWith<_$MovedPermanentlyImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$FoundImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$FoundImplCopyWith(
          _$FoundImpl value, $Res Function(_$FoundImpl) then) =
      __$$FoundImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$FoundImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$FoundImpl>
    implements _$$FoundImplCopyWith<$Res> {
  __$$FoundImplCopyWithImpl(
      _$FoundImpl _value, $Res Function(_$FoundImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$FoundImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$FoundImpl implements Found {
  const _$FoundImpl({this.statusCode = HttpResponseCode.found, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.found(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FoundImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$FoundImplCopyWith<_$FoundImpl> get copyWith =>
      __$$FoundImplCopyWithImpl<_$FoundImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return found(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return found?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (found != null) {
      return found(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return found(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return found?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (found != null) {
      return found(this);
    }
    return orElse();
  }
}

abstract class Found implements NetworkException {
  const factory Found({final int statusCode, final ErrorBean? error}) =
      _$FoundImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$FoundImplCopyWith<_$FoundImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MovedTemporarilyImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$MovedTemporarilyImplCopyWith(_$MovedTemporarilyImpl value,
          $Res Function(_$MovedTemporarilyImpl) then) =
      __$$MovedTemporarilyImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$MovedTemporarilyImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$MovedTemporarilyImpl>
    implements _$$MovedTemporarilyImplCopyWith<$Res> {
  __$$MovedTemporarilyImplCopyWithImpl(_$MovedTemporarilyImpl _value,
      $Res Function(_$MovedTemporarilyImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$MovedTemporarilyImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$MovedTemporarilyImpl implements MovedTemporarily {
  const _$MovedTemporarilyImpl(
      {this.statusCode = HttpResponseCode.movedTemporarily, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.movedTemporarily(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MovedTemporarilyImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$MovedTemporarilyImplCopyWith<_$MovedTemporarilyImpl> get copyWith =>
      __$$MovedTemporarilyImplCopyWithImpl<_$MovedTemporarilyImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return movedTemporarily(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return movedTemporarily?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (movedTemporarily != null) {
      return movedTemporarily(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return movedTemporarily(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return movedTemporarily?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (movedTemporarily != null) {
      return movedTemporarily(this);
    }
    return orElse();
  }
}

abstract class MovedTemporarily implements NetworkException {
  const factory MovedTemporarily(
      {final int statusCode, final ErrorBean? error}) = _$MovedTemporarilyImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$MovedTemporarilyImplCopyWith<_$MovedTemporarilyImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NotModifiedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NotModifiedImplCopyWith(
          _$NotModifiedImpl value, $Res Function(_$NotModifiedImpl) then) =
      __$$NotModifiedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NotModifiedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NotModifiedImpl>
    implements _$$NotModifiedImplCopyWith<$Res> {
  __$$NotModifiedImplCopyWithImpl(
      _$NotModifiedImpl _value, $Res Function(_$NotModifiedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NotModifiedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NotModifiedImpl implements NotModified {
  const _$NotModifiedImpl(
      {this.statusCode = HttpResponseCode.notModified, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.notModified(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NotModifiedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NotModifiedImplCopyWith<_$NotModifiedImpl> get copyWith =>
      __$$NotModifiedImplCopyWithImpl<_$NotModifiedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return notModified(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return notModified?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (notModified != null) {
      return notModified(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return notModified(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return notModified?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (notModified != null) {
      return notModified(this);
    }
    return orElse();
  }
}

abstract class NotModified implements NetworkException {
  const factory NotModified({final int statusCode, final ErrorBean? error}) =
      _$NotModifiedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NotModifiedImplCopyWith<_$NotModifiedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UseProxyImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UseProxyImplCopyWith(
          _$UseProxyImpl value, $Res Function(_$UseProxyImpl) then) =
      __$$UseProxyImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UseProxyImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$UseProxyImpl>
    implements _$$UseProxyImplCopyWith<$Res> {
  __$$UseProxyImplCopyWithImpl(
      _$UseProxyImpl _value, $Res Function(_$UseProxyImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UseProxyImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UseProxyImpl implements UseProxy {
  const _$UseProxyImpl(
      {this.statusCode = HttpResponseCode.useProxy, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.useProxy(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UseProxyImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UseProxyImplCopyWith<_$UseProxyImpl> get copyWith =>
      __$$UseProxyImplCopyWithImpl<_$UseProxyImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return useProxy(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return useProxy?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (useProxy != null) {
      return useProxy(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return useProxy(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return useProxy?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (useProxy != null) {
      return useProxy(this);
    }
    return orElse();
  }
}

abstract class UseProxy implements NetworkException {
  const factory UseProxy({final int statusCode, final ErrorBean? error}) =
      _$UseProxyImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UseProxyImplCopyWith<_$UseProxyImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TemporaryRedirectImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$TemporaryRedirectImplCopyWith(_$TemporaryRedirectImpl value,
          $Res Function(_$TemporaryRedirectImpl) then) =
      __$$TemporaryRedirectImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$TemporaryRedirectImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$TemporaryRedirectImpl>
    implements _$$TemporaryRedirectImplCopyWith<$Res> {
  __$$TemporaryRedirectImplCopyWithImpl(_$TemporaryRedirectImpl _value,
      $Res Function(_$TemporaryRedirectImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$TemporaryRedirectImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$TemporaryRedirectImpl implements TemporaryRedirect {
  const _$TemporaryRedirectImpl(
      {this.statusCode = HttpResponseCode.temporaryRedirect, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.temporaryRedirect(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TemporaryRedirectImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$TemporaryRedirectImplCopyWith<_$TemporaryRedirectImpl> get copyWith =>
      __$$TemporaryRedirectImplCopyWithImpl<_$TemporaryRedirectImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return temporaryRedirect(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return temporaryRedirect?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (temporaryRedirect != null) {
      return temporaryRedirect(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return temporaryRedirect(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return temporaryRedirect?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (temporaryRedirect != null) {
      return temporaryRedirect(this);
    }
    return orElse();
  }
}

abstract class TemporaryRedirect implements NetworkException {
  const factory TemporaryRedirect(
      {final int statusCode, final ErrorBean? error}) = _$TemporaryRedirectImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$TemporaryRedirectImplCopyWith<_$TemporaryRedirectImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$PermanentRedirectImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$PermanentRedirectImplCopyWith(_$PermanentRedirectImpl value,
          $Res Function(_$PermanentRedirectImpl) then) =
      __$$PermanentRedirectImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$PermanentRedirectImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$PermanentRedirectImpl>
    implements _$$PermanentRedirectImplCopyWith<$Res> {
  __$$PermanentRedirectImplCopyWithImpl(_$PermanentRedirectImpl _value,
      $Res Function(_$PermanentRedirectImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$PermanentRedirectImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$PermanentRedirectImpl implements PermanentRedirect {
  const _$PermanentRedirectImpl(
      {this.statusCode = HttpResponseCode.permanentRedirect, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.permanentRedirect(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PermanentRedirectImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$PermanentRedirectImplCopyWith<_$PermanentRedirectImpl> get copyWith =>
      __$$PermanentRedirectImplCopyWithImpl<_$PermanentRedirectImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return permanentRedirect(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return permanentRedirect?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (permanentRedirect != null) {
      return permanentRedirect(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return permanentRedirect(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return permanentRedirect?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (permanentRedirect != null) {
      return permanentRedirect(this);
    }
    return orElse();
  }
}

abstract class PermanentRedirect implements NetworkException {
  const factory PermanentRedirect(
      {final int statusCode, final ErrorBean? error}) = _$PermanentRedirectImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$PermanentRedirectImplCopyWith<_$PermanentRedirectImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$BadRequestImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$BadRequestImplCopyWith(
          _$BadRequestImpl value, $Res Function(_$BadRequestImpl) then) =
      __$$BadRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$BadRequestImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$BadRequestImpl>
    implements _$$BadRequestImplCopyWith<$Res> {
  __$$BadRequestImplCopyWithImpl(
      _$BadRequestImpl _value, $Res Function(_$BadRequestImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$BadRequestImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$BadRequestImpl implements BadRequest {
  const _$BadRequestImpl(
      {this.statusCode = HttpResponseCode.badRequest, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.badRequest(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BadRequestImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$BadRequestImplCopyWith<_$BadRequestImpl> get copyWith =>
      __$$BadRequestImplCopyWithImpl<_$BadRequestImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return badRequest(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return badRequest?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (badRequest != null) {
      return badRequest(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return badRequest(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return badRequest?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (badRequest != null) {
      return badRequest(this);
    }
    return orElse();
  }
}

abstract class BadRequest implements NetworkException {
  const factory BadRequest({final int statusCode, final ErrorBean? error}) =
      _$BadRequestImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$BadRequestImplCopyWith<_$BadRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UnauthorizedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UnauthorizedImplCopyWith(
          _$UnauthorizedImpl value, $Res Function(_$UnauthorizedImpl) then) =
      __$$UnauthorizedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UnauthorizedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$UnauthorizedImpl>
    implements _$$UnauthorizedImplCopyWith<$Res> {
  __$$UnauthorizedImplCopyWithImpl(
      _$UnauthorizedImpl _value, $Res Function(_$UnauthorizedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UnauthorizedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UnauthorizedImpl implements Unauthorized {
  const _$UnauthorizedImpl(
      {this.statusCode = HttpResponseCode.unauthorized, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.unauthorized(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UnauthorizedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UnauthorizedImplCopyWith<_$UnauthorizedImpl> get copyWith =>
      __$$UnauthorizedImplCopyWithImpl<_$UnauthorizedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return unauthorized(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return unauthorized?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (unauthorized != null) {
      return unauthorized(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return unauthorized(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return unauthorized?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (unauthorized != null) {
      return unauthorized(this);
    }
    return orElse();
  }
}

abstract class Unauthorized implements NetworkException {
  const factory Unauthorized({final int statusCode, final ErrorBean? error}) =
      _$UnauthorizedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UnauthorizedImplCopyWith<_$UnauthorizedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ForbiddenImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$ForbiddenImplCopyWith(
          _$ForbiddenImpl value, $Res Function(_$ForbiddenImpl) then) =
      __$$ForbiddenImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$ForbiddenImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$ForbiddenImpl>
    implements _$$ForbiddenImplCopyWith<$Res> {
  __$$ForbiddenImplCopyWithImpl(
      _$ForbiddenImpl _value, $Res Function(_$ForbiddenImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$ForbiddenImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$ForbiddenImpl implements Forbidden {
  const _$ForbiddenImpl(
      {this.statusCode = HttpResponseCode.forbidden, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.forbidden(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ForbiddenImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ForbiddenImplCopyWith<_$ForbiddenImpl> get copyWith =>
      __$$ForbiddenImplCopyWithImpl<_$ForbiddenImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return forbidden(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return forbidden?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (forbidden != null) {
      return forbidden(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return forbidden(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return forbidden?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (forbidden != null) {
      return forbidden(this);
    }
    return orElse();
  }
}

abstract class Forbidden implements NetworkException {
  const factory Forbidden({final int statusCode, final ErrorBean? error}) =
      _$ForbiddenImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$ForbiddenImplCopyWith<_$ForbiddenImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NotFoundImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NotFoundImplCopyWith(
          _$NotFoundImpl value, $Res Function(_$NotFoundImpl) then) =
      __$$NotFoundImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NotFoundImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NotFoundImpl>
    implements _$$NotFoundImplCopyWith<$Res> {
  __$$NotFoundImplCopyWithImpl(
      _$NotFoundImpl _value, $Res Function(_$NotFoundImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NotFoundImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NotFoundImpl implements NotFound {
  const _$NotFoundImpl(
      {this.statusCode = HttpResponseCode.notFound, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.notFound(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NotFoundImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NotFoundImplCopyWith<_$NotFoundImpl> get copyWith =>
      __$$NotFoundImplCopyWithImpl<_$NotFoundImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return notFound(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return notFound?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (notFound != null) {
      return notFound(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return notFound(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return notFound?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (notFound != null) {
      return notFound(this);
    }
    return orElse();
  }
}

abstract class NotFound implements NetworkException {
  const factory NotFound({final int statusCode, final ErrorBean? error}) =
      _$NotFoundImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NotFoundImplCopyWith<_$NotFoundImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MethodNotAllowedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$MethodNotAllowedImplCopyWith(_$MethodNotAllowedImpl value,
          $Res Function(_$MethodNotAllowedImpl) then) =
      __$$MethodNotAllowedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$MethodNotAllowedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$MethodNotAllowedImpl>
    implements _$$MethodNotAllowedImplCopyWith<$Res> {
  __$$MethodNotAllowedImplCopyWithImpl(_$MethodNotAllowedImpl _value,
      $Res Function(_$MethodNotAllowedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$MethodNotAllowedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$MethodNotAllowedImpl implements MethodNotAllowed {
  const _$MethodNotAllowedImpl(
      {this.statusCode = HttpResponseCode.methodNotAllowed, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.methodNotAllowed(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MethodNotAllowedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$MethodNotAllowedImplCopyWith<_$MethodNotAllowedImpl> get copyWith =>
      __$$MethodNotAllowedImplCopyWithImpl<_$MethodNotAllowedImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return methodNotAllowed(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return methodNotAllowed?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (methodNotAllowed != null) {
      return methodNotAllowed(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return methodNotAllowed(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return methodNotAllowed?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (methodNotAllowed != null) {
      return methodNotAllowed(this);
    }
    return orElse();
  }
}

abstract class MethodNotAllowed implements NetworkException {
  const factory MethodNotAllowed(
      {final int statusCode, final ErrorBean? error}) = _$MethodNotAllowedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$MethodNotAllowedImplCopyWith<_$MethodNotAllowedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NotAcceptableImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NotAcceptableImplCopyWith(
          _$NotAcceptableImpl value, $Res Function(_$NotAcceptableImpl) then) =
      __$$NotAcceptableImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NotAcceptableImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NotAcceptableImpl>
    implements _$$NotAcceptableImplCopyWith<$Res> {
  __$$NotAcceptableImplCopyWithImpl(
      _$NotAcceptableImpl _value, $Res Function(_$NotAcceptableImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NotAcceptableImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NotAcceptableImpl implements NotAcceptable {
  const _$NotAcceptableImpl(
      {this.statusCode = HttpResponseCode.notAcceptable, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.notAcceptable(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NotAcceptableImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NotAcceptableImplCopyWith<_$NotAcceptableImpl> get copyWith =>
      __$$NotAcceptableImplCopyWithImpl<_$NotAcceptableImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return notAcceptable(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return notAcceptable?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (notAcceptable != null) {
      return notAcceptable(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return notAcceptable(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return notAcceptable?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (notAcceptable != null) {
      return notAcceptable(this);
    }
    return orElse();
  }
}

abstract class NotAcceptable implements NetworkException {
  const factory NotAcceptable({final int statusCode, final ErrorBean? error}) =
      _$NotAcceptableImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NotAcceptableImplCopyWith<_$NotAcceptableImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ProxyAuthenticationRequiredImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$ProxyAuthenticationRequiredImplCopyWith(
          _$ProxyAuthenticationRequiredImpl value,
          $Res Function(_$ProxyAuthenticationRequiredImpl) then) =
      __$$ProxyAuthenticationRequiredImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$ProxyAuthenticationRequiredImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res,
        _$ProxyAuthenticationRequiredImpl>
    implements _$$ProxyAuthenticationRequiredImplCopyWith<$Res> {
  __$$ProxyAuthenticationRequiredImplCopyWithImpl(
      _$ProxyAuthenticationRequiredImpl _value,
      $Res Function(_$ProxyAuthenticationRequiredImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$ProxyAuthenticationRequiredImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$ProxyAuthenticationRequiredImpl implements ProxyAuthenticationRequired {
  const _$ProxyAuthenticationRequiredImpl(
      {this.statusCode = HttpResponseCode.proxyAuthenticationRequired,
      this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.proxyAuthenticationRequired(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ProxyAuthenticationRequiredImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ProxyAuthenticationRequiredImplCopyWith<_$ProxyAuthenticationRequiredImpl>
      get copyWith => __$$ProxyAuthenticationRequiredImplCopyWithImpl<
          _$ProxyAuthenticationRequiredImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return proxyAuthenticationRequired(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return proxyAuthenticationRequired?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (proxyAuthenticationRequired != null) {
      return proxyAuthenticationRequired(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return proxyAuthenticationRequired(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return proxyAuthenticationRequired?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (proxyAuthenticationRequired != null) {
      return proxyAuthenticationRequired(this);
    }
    return orElse();
  }
}

abstract class ProxyAuthenticationRequired implements NetworkException {
  const factory ProxyAuthenticationRequired(
      {final int statusCode,
      final ErrorBean? error}) = _$ProxyAuthenticationRequiredImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$ProxyAuthenticationRequiredImplCopyWith<_$ProxyAuthenticationRequiredImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RequestTimeoutImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$RequestTimeoutImplCopyWith(_$RequestTimeoutImpl value,
          $Res Function(_$RequestTimeoutImpl) then) =
      __$$RequestTimeoutImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$RequestTimeoutImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$RequestTimeoutImpl>
    implements _$$RequestTimeoutImplCopyWith<$Res> {
  __$$RequestTimeoutImplCopyWithImpl(
      _$RequestTimeoutImpl _value, $Res Function(_$RequestTimeoutImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$RequestTimeoutImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$RequestTimeoutImpl implements RequestTimeout {
  const _$RequestTimeoutImpl(
      {this.statusCode = HttpResponseCode.requestTimeout, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.requestTimeout(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RequestTimeoutImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$RequestTimeoutImplCopyWith<_$RequestTimeoutImpl> get copyWith =>
      __$$RequestTimeoutImplCopyWithImpl<_$RequestTimeoutImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return requestTimeout(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return requestTimeout?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestTimeout != null) {
      return requestTimeout(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return requestTimeout(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return requestTimeout?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestTimeout != null) {
      return requestTimeout(this);
    }
    return orElse();
  }
}

abstract class RequestTimeout implements NetworkException {
  const factory RequestTimeout({final int statusCode, final ErrorBean? error}) =
      _$RequestTimeoutImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$RequestTimeoutImplCopyWith<_$RequestTimeoutImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ConflictImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$ConflictImplCopyWith(
          _$ConflictImpl value, $Res Function(_$ConflictImpl) then) =
      __$$ConflictImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$ConflictImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$ConflictImpl>
    implements _$$ConflictImplCopyWith<$Res> {
  __$$ConflictImplCopyWithImpl(
      _$ConflictImpl _value, $Res Function(_$ConflictImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$ConflictImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$ConflictImpl implements Conflict {
  const _$ConflictImpl(
      {this.statusCode = HttpResponseCode.conflict, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.conflict(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ConflictImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ConflictImplCopyWith<_$ConflictImpl> get copyWith =>
      __$$ConflictImplCopyWithImpl<_$ConflictImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return conflict(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return conflict?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (conflict != null) {
      return conflict(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return conflict(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return conflict?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (conflict != null) {
      return conflict(this);
    }
    return orElse();
  }
}

abstract class Conflict implements NetworkException {
  const factory Conflict({final int statusCode, final ErrorBean? error}) =
      _$ConflictImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$ConflictImplCopyWith<_$ConflictImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$LengthRequiredImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$LengthRequiredImplCopyWith(_$LengthRequiredImpl value,
          $Res Function(_$LengthRequiredImpl) then) =
      __$$LengthRequiredImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$LengthRequiredImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$LengthRequiredImpl>
    implements _$$LengthRequiredImplCopyWith<$Res> {
  __$$LengthRequiredImplCopyWithImpl(
      _$LengthRequiredImpl _value, $Res Function(_$LengthRequiredImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$LengthRequiredImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$LengthRequiredImpl implements LengthRequired {
  const _$LengthRequiredImpl(
      {this.statusCode = HttpResponseCode.lengthRequired, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.lengthRequired(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LengthRequiredImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$LengthRequiredImplCopyWith<_$LengthRequiredImpl> get copyWith =>
      __$$LengthRequiredImplCopyWithImpl<_$LengthRequiredImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return lengthRequired(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return lengthRequired?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (lengthRequired != null) {
      return lengthRequired(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return lengthRequired(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return lengthRequired?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (lengthRequired != null) {
      return lengthRequired(this);
    }
    return orElse();
  }
}

abstract class LengthRequired implements NetworkException {
  const factory LengthRequired({final int statusCode, final ErrorBean? error}) =
      _$LengthRequiredImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$LengthRequiredImplCopyWith<_$LengthRequiredImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RequestEntityTooLargeImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$RequestEntityTooLargeImplCopyWith(
          _$RequestEntityTooLargeImpl value,
          $Res Function(_$RequestEntityTooLargeImpl) then) =
      __$$RequestEntityTooLargeImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$RequestEntityTooLargeImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$RequestEntityTooLargeImpl>
    implements _$$RequestEntityTooLargeImplCopyWith<$Res> {
  __$$RequestEntityTooLargeImplCopyWithImpl(_$RequestEntityTooLargeImpl _value,
      $Res Function(_$RequestEntityTooLargeImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$RequestEntityTooLargeImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$RequestEntityTooLargeImpl implements RequestEntityTooLarge {
  const _$RequestEntityTooLargeImpl(
      {this.statusCode = HttpResponseCode.requestEntityTooLarge, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.requestEntityTooLarge(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RequestEntityTooLargeImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$RequestEntityTooLargeImplCopyWith<_$RequestEntityTooLargeImpl>
      get copyWith => __$$RequestEntityTooLargeImplCopyWithImpl<
          _$RequestEntityTooLargeImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return requestEntityTooLarge(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return requestEntityTooLarge?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestEntityTooLarge != null) {
      return requestEntityTooLarge(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return requestEntityTooLarge(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return requestEntityTooLarge?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestEntityTooLarge != null) {
      return requestEntityTooLarge(this);
    }
    return orElse();
  }
}

abstract class RequestEntityTooLarge implements NetworkException {
  const factory RequestEntityTooLarge(
      {final int statusCode,
      final ErrorBean? error}) = _$RequestEntityTooLargeImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$RequestEntityTooLargeImplCopyWith<_$RequestEntityTooLargeImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RequestUriTooLongImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$RequestUriTooLongImplCopyWith(_$RequestUriTooLongImpl value,
          $Res Function(_$RequestUriTooLongImpl) then) =
      __$$RequestUriTooLongImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$RequestUriTooLongImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$RequestUriTooLongImpl>
    implements _$$RequestUriTooLongImplCopyWith<$Res> {
  __$$RequestUriTooLongImplCopyWithImpl(_$RequestUriTooLongImpl _value,
      $Res Function(_$RequestUriTooLongImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$RequestUriTooLongImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$RequestUriTooLongImpl implements RequestUriTooLong {
  const _$RequestUriTooLongImpl(
      {this.statusCode = HttpResponseCode.requestUriTooLong, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.requestUriTooLong(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RequestUriTooLongImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$RequestUriTooLongImplCopyWith<_$RequestUriTooLongImpl> get copyWith =>
      __$$RequestUriTooLongImplCopyWithImpl<_$RequestUriTooLongImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return requestUriTooLong(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return requestUriTooLong?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestUriTooLong != null) {
      return requestUriTooLong(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return requestUriTooLong(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return requestUriTooLong?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestUriTooLong != null) {
      return requestUriTooLong(this);
    }
    return orElse();
  }
}

abstract class RequestUriTooLong implements NetworkException {
  const factory RequestUriTooLong(
      {final int statusCode, final ErrorBean? error}) = _$RequestUriTooLongImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$RequestUriTooLongImplCopyWith<_$RequestUriTooLongImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UnsupportedMediaTypeImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UnsupportedMediaTypeImplCopyWith(_$UnsupportedMediaTypeImpl value,
          $Res Function(_$UnsupportedMediaTypeImpl) then) =
      __$$UnsupportedMediaTypeImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UnsupportedMediaTypeImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$UnsupportedMediaTypeImpl>
    implements _$$UnsupportedMediaTypeImplCopyWith<$Res> {
  __$$UnsupportedMediaTypeImplCopyWithImpl(_$UnsupportedMediaTypeImpl _value,
      $Res Function(_$UnsupportedMediaTypeImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UnsupportedMediaTypeImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UnsupportedMediaTypeImpl implements UnsupportedMediaType {
  const _$UnsupportedMediaTypeImpl(
      {this.statusCode = HttpResponseCode.unsupportedMediaType, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.unsupportedMediaType(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UnsupportedMediaTypeImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UnsupportedMediaTypeImplCopyWith<_$UnsupportedMediaTypeImpl>
      get copyWith =>
          __$$UnsupportedMediaTypeImplCopyWithImpl<_$UnsupportedMediaTypeImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return unsupportedMediaType(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return unsupportedMediaType?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (unsupportedMediaType != null) {
      return unsupportedMediaType(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return unsupportedMediaType(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return unsupportedMediaType?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (unsupportedMediaType != null) {
      return unsupportedMediaType(this);
    }
    return orElse();
  }
}

abstract class UnsupportedMediaType implements NetworkException {
  const factory UnsupportedMediaType(
      {final int statusCode,
      final ErrorBean? error}) = _$UnsupportedMediaTypeImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UnsupportedMediaTypeImplCopyWith<_$UnsupportedMediaTypeImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ExpectationFailedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$ExpectationFailedImplCopyWith(_$ExpectationFailedImpl value,
          $Res Function(_$ExpectationFailedImpl) then) =
      __$$ExpectationFailedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$ExpectationFailedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$ExpectationFailedImpl>
    implements _$$ExpectationFailedImplCopyWith<$Res> {
  __$$ExpectationFailedImplCopyWithImpl(_$ExpectationFailedImpl _value,
      $Res Function(_$ExpectationFailedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$ExpectationFailedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$ExpectationFailedImpl implements ExpectationFailed {
  const _$ExpectationFailedImpl(
      {this.statusCode = HttpResponseCode.expectationFailed, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.expectationFailed(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ExpectationFailedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ExpectationFailedImplCopyWith<_$ExpectationFailedImpl> get copyWith =>
      __$$ExpectationFailedImplCopyWithImpl<_$ExpectationFailedImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return expectationFailed(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return expectationFailed?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (expectationFailed != null) {
      return expectationFailed(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return expectationFailed(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return expectationFailed?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (expectationFailed != null) {
      return expectationFailed(this);
    }
    return orElse();
  }
}

abstract class ExpectationFailed implements NetworkException {
  const factory ExpectationFailed(
      {final int statusCode, final ErrorBean? error}) = _$ExpectationFailedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$ExpectationFailedImplCopyWith<_$ExpectationFailedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$LockedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$LockedImplCopyWith(
          _$LockedImpl value, $Res Function(_$LockedImpl) then) =
      __$$LockedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$LockedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$LockedImpl>
    implements _$$LockedImplCopyWith<$Res> {
  __$$LockedImplCopyWithImpl(
      _$LockedImpl _value, $Res Function(_$LockedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$LockedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$LockedImpl implements Locked {
  const _$LockedImpl({this.statusCode = HttpResponseCode.locked, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.locked(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LockedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$LockedImplCopyWith<_$LockedImpl> get copyWith =>
      __$$LockedImplCopyWithImpl<_$LockedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return locked(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return locked?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (locked != null) {
      return locked(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return locked(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return locked?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (locked != null) {
      return locked(this);
    }
    return orElse();
  }
}

abstract class Locked implements NetworkException {
  const factory Locked({final int statusCode, final ErrorBean? error}) =
      _$LockedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$LockedImplCopyWith<_$LockedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UpgradeRequiredImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UpgradeRequiredImplCopyWith(_$UpgradeRequiredImpl value,
          $Res Function(_$UpgradeRequiredImpl) then) =
      __$$UpgradeRequiredImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UpgradeRequiredImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$UpgradeRequiredImpl>
    implements _$$UpgradeRequiredImplCopyWith<$Res> {
  __$$UpgradeRequiredImplCopyWithImpl(
      _$UpgradeRequiredImpl _value, $Res Function(_$UpgradeRequiredImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UpgradeRequiredImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UpgradeRequiredImpl implements UpgradeRequired {
  const _$UpgradeRequiredImpl(
      {this.statusCode = HttpResponseCode.upgradeRequired, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.upgradeRequired(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UpgradeRequiredImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UpgradeRequiredImplCopyWith<_$UpgradeRequiredImpl> get copyWith =>
      __$$UpgradeRequiredImplCopyWithImpl<_$UpgradeRequiredImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return upgradeRequired(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return upgradeRequired?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (upgradeRequired != null) {
      return upgradeRequired(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return upgradeRequired(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return upgradeRequired?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (upgradeRequired != null) {
      return upgradeRequired(this);
    }
    return orElse();
  }
}

abstract class UpgradeRequired implements NetworkException {
  const factory UpgradeRequired(
      {final int statusCode, final ErrorBean? error}) = _$UpgradeRequiredImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UpgradeRequiredImplCopyWith<_$UpgradeRequiredImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TooManyRequestsImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$TooManyRequestsImplCopyWith(_$TooManyRequestsImpl value,
          $Res Function(_$TooManyRequestsImpl) then) =
      __$$TooManyRequestsImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$TooManyRequestsImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$TooManyRequestsImpl>
    implements _$$TooManyRequestsImplCopyWith<$Res> {
  __$$TooManyRequestsImplCopyWithImpl(
      _$TooManyRequestsImpl _value, $Res Function(_$TooManyRequestsImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$TooManyRequestsImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$TooManyRequestsImpl implements TooManyRequests {
  const _$TooManyRequestsImpl(
      {this.statusCode = HttpResponseCode.tooManyRequests, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.tooManyRequests(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TooManyRequestsImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$TooManyRequestsImplCopyWith<_$TooManyRequestsImpl> get copyWith =>
      __$$TooManyRequestsImplCopyWithImpl<_$TooManyRequestsImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return tooManyRequests(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return tooManyRequests?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (tooManyRequests != null) {
      return tooManyRequests(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return tooManyRequests(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return tooManyRequests?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (tooManyRequests != null) {
      return tooManyRequests(this);
    }
    return orElse();
  }
}

abstract class TooManyRequests implements NetworkException {
  const factory TooManyRequests(
      {final int statusCode, final ErrorBean? error}) = _$TooManyRequestsImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$TooManyRequestsImplCopyWith<_$TooManyRequestsImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RequestHeaderFieldsTooLargeImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$RequestHeaderFieldsTooLargeImplCopyWith(
          _$RequestHeaderFieldsTooLargeImpl value,
          $Res Function(_$RequestHeaderFieldsTooLargeImpl) then) =
      __$$RequestHeaderFieldsTooLargeImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$RequestHeaderFieldsTooLargeImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res,
        _$RequestHeaderFieldsTooLargeImpl>
    implements _$$RequestHeaderFieldsTooLargeImplCopyWith<$Res> {
  __$$RequestHeaderFieldsTooLargeImplCopyWithImpl(
      _$RequestHeaderFieldsTooLargeImpl _value,
      $Res Function(_$RequestHeaderFieldsTooLargeImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$RequestHeaderFieldsTooLargeImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$RequestHeaderFieldsTooLargeImpl implements RequestHeaderFieldsTooLarge {
  const _$RequestHeaderFieldsTooLargeImpl(
      {this.statusCode = HttpResponseCode.requestHeaderFieldsTooLarge,
      this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.requestHeaderFieldsTooLarge(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RequestHeaderFieldsTooLargeImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$RequestHeaderFieldsTooLargeImplCopyWith<_$RequestHeaderFieldsTooLargeImpl>
      get copyWith => __$$RequestHeaderFieldsTooLargeImplCopyWithImpl<
          _$RequestHeaderFieldsTooLargeImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return requestHeaderFieldsTooLarge(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return requestHeaderFieldsTooLarge?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestHeaderFieldsTooLarge != null) {
      return requestHeaderFieldsTooLarge(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return requestHeaderFieldsTooLarge(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return requestHeaderFieldsTooLarge?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestHeaderFieldsTooLarge != null) {
      return requestHeaderFieldsTooLarge(this);
    }
    return orElse();
  }
}

abstract class RequestHeaderFieldsTooLarge implements NetworkException {
  const factory RequestHeaderFieldsTooLarge(
      {final int statusCode,
      final ErrorBean? error}) = _$RequestHeaderFieldsTooLargeImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$RequestHeaderFieldsTooLargeImplCopyWith<_$RequestHeaderFieldsTooLargeImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UnavailableForLegalReasonsImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UnavailableForLegalReasonsImplCopyWith(
          _$UnavailableForLegalReasonsImpl value,
          $Res Function(_$UnavailableForLegalReasonsImpl) then) =
      __$$UnavailableForLegalReasonsImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UnavailableForLegalReasonsImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res,
        _$UnavailableForLegalReasonsImpl>
    implements _$$UnavailableForLegalReasonsImplCopyWith<$Res> {
  __$$UnavailableForLegalReasonsImplCopyWithImpl(
      _$UnavailableForLegalReasonsImpl _value,
      $Res Function(_$UnavailableForLegalReasonsImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UnavailableForLegalReasonsImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UnavailableForLegalReasonsImpl implements UnavailableForLegalReasons {
  const _$UnavailableForLegalReasonsImpl(
      {this.statusCode = HttpResponseCode.unavailableForLegalReasons,
      this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.unavailableForLegalReasons(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UnavailableForLegalReasonsImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UnavailableForLegalReasonsImplCopyWith<_$UnavailableForLegalReasonsImpl>
      get copyWith => __$$UnavailableForLegalReasonsImplCopyWithImpl<
          _$UnavailableForLegalReasonsImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return unavailableForLegalReasons(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return unavailableForLegalReasons?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (unavailableForLegalReasons != null) {
      return unavailableForLegalReasons(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return unavailableForLegalReasons(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return unavailableForLegalReasons?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (unavailableForLegalReasons != null) {
      return unavailableForLegalReasons(this);
    }
    return orElse();
  }
}

abstract class UnavailableForLegalReasons implements NetworkException {
  const factory UnavailableForLegalReasons(
      {final int statusCode,
      final ErrorBean? error}) = _$UnavailableForLegalReasonsImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UnavailableForLegalReasonsImplCopyWith<_$UnavailableForLegalReasonsImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ClientClosedRequestImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$ClientClosedRequestImplCopyWith(_$ClientClosedRequestImpl value,
          $Res Function(_$ClientClosedRequestImpl) then) =
      __$$ClientClosedRequestImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$ClientClosedRequestImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$ClientClosedRequestImpl>
    implements _$$ClientClosedRequestImplCopyWith<$Res> {
  __$$ClientClosedRequestImplCopyWithImpl(_$ClientClosedRequestImpl _value,
      $Res Function(_$ClientClosedRequestImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$ClientClosedRequestImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$ClientClosedRequestImpl implements ClientClosedRequest {
  const _$ClientClosedRequestImpl(
      {this.statusCode = HttpResponseCode.clientClosedRequest, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.clientClosedRequest(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ClientClosedRequestImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ClientClosedRequestImplCopyWith<_$ClientClosedRequestImpl> get copyWith =>
      __$$ClientClosedRequestImplCopyWithImpl<_$ClientClosedRequestImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return clientClosedRequest(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return clientClosedRequest?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (clientClosedRequest != null) {
      return clientClosedRequest(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return clientClosedRequest(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return clientClosedRequest?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (clientClosedRequest != null) {
      return clientClosedRequest(this);
    }
    return orElse();
  }
}

abstract class ClientClosedRequest implements NetworkException {
  const factory ClientClosedRequest(
      {final int statusCode,
      final ErrorBean? error}) = _$ClientClosedRequestImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$ClientClosedRequestImplCopyWith<_$ClientClosedRequestImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$InternalServerErrorImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$InternalServerErrorImplCopyWith(_$InternalServerErrorImpl value,
          $Res Function(_$InternalServerErrorImpl) then) =
      __$$InternalServerErrorImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$InternalServerErrorImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$InternalServerErrorImpl>
    implements _$$InternalServerErrorImplCopyWith<$Res> {
  __$$InternalServerErrorImplCopyWithImpl(_$InternalServerErrorImpl _value,
      $Res Function(_$InternalServerErrorImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$InternalServerErrorImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$InternalServerErrorImpl implements InternalServerError {
  const _$InternalServerErrorImpl(
      {this.statusCode = HttpResponseCode.internalServerError, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.internalServerError(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$InternalServerErrorImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$InternalServerErrorImplCopyWith<_$InternalServerErrorImpl> get copyWith =>
      __$$InternalServerErrorImplCopyWithImpl<_$InternalServerErrorImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return internalServerError(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return internalServerError?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (internalServerError != null) {
      return internalServerError(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return internalServerError(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return internalServerError?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (internalServerError != null) {
      return internalServerError(this);
    }
    return orElse();
  }
}

abstract class InternalServerError implements NetworkException {
  const factory InternalServerError(
      {final int statusCode,
      final ErrorBean? error}) = _$InternalServerErrorImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$InternalServerErrorImplCopyWith<_$InternalServerErrorImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NotImplementedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NotImplementedImplCopyWith(_$NotImplementedImpl value,
          $Res Function(_$NotImplementedImpl) then) =
      __$$NotImplementedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NotImplementedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NotImplementedImpl>
    implements _$$NotImplementedImplCopyWith<$Res> {
  __$$NotImplementedImplCopyWithImpl(
      _$NotImplementedImpl _value, $Res Function(_$NotImplementedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NotImplementedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NotImplementedImpl implements NotImplemented {
  const _$NotImplementedImpl(
      {this.statusCode = HttpResponseCode.notImplemented, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.notImplemented(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NotImplementedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NotImplementedImplCopyWith<_$NotImplementedImpl> get copyWith =>
      __$$NotImplementedImplCopyWithImpl<_$NotImplementedImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return notImplemented(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return notImplemented?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (notImplemented != null) {
      return notImplemented(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return notImplemented(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return notImplemented?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (notImplemented != null) {
      return notImplemented(this);
    }
    return orElse();
  }
}

abstract class NotImplemented implements NetworkException {
  const factory NotImplemented({final int statusCode, final ErrorBean? error}) =
      _$NotImplementedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NotImplementedImplCopyWith<_$NotImplementedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$BadGatewayImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$BadGatewayImplCopyWith(
          _$BadGatewayImpl value, $Res Function(_$BadGatewayImpl) then) =
      __$$BadGatewayImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$BadGatewayImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$BadGatewayImpl>
    implements _$$BadGatewayImplCopyWith<$Res> {
  __$$BadGatewayImplCopyWithImpl(
      _$BadGatewayImpl _value, $Res Function(_$BadGatewayImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$BadGatewayImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$BadGatewayImpl implements BadGateway {
  const _$BadGatewayImpl(
      {this.statusCode = HttpResponseCode.badGateway, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.badGateway(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BadGatewayImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$BadGatewayImplCopyWith<_$BadGatewayImpl> get copyWith =>
      __$$BadGatewayImplCopyWithImpl<_$BadGatewayImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return badGateway(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return badGateway?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (badGateway != null) {
      return badGateway(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return badGateway(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return badGateway?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (badGateway != null) {
      return badGateway(this);
    }
    return orElse();
  }
}

abstract class BadGateway implements NetworkException {
  const factory BadGateway({final int statusCode, final ErrorBean? error}) =
      _$BadGatewayImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$BadGatewayImplCopyWith<_$BadGatewayImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$ServiceUnavailableImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$ServiceUnavailableImplCopyWith(_$ServiceUnavailableImpl value,
          $Res Function(_$ServiceUnavailableImpl) then) =
      __$$ServiceUnavailableImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$ServiceUnavailableImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$ServiceUnavailableImpl>
    implements _$$ServiceUnavailableImplCopyWith<$Res> {
  __$$ServiceUnavailableImplCopyWithImpl(_$ServiceUnavailableImpl _value,
      $Res Function(_$ServiceUnavailableImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$ServiceUnavailableImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$ServiceUnavailableImpl implements ServiceUnavailable {
  const _$ServiceUnavailableImpl(
      {this.statusCode = HttpResponseCode.serviceUnavailable, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.serviceUnavailable(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$ServiceUnavailableImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$ServiceUnavailableImplCopyWith<_$ServiceUnavailableImpl> get copyWith =>
      __$$ServiceUnavailableImplCopyWithImpl<_$ServiceUnavailableImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return serviceUnavailable(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return serviceUnavailable?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (serviceUnavailable != null) {
      return serviceUnavailable(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return serviceUnavailable(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return serviceUnavailable?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (serviceUnavailable != null) {
      return serviceUnavailable(this);
    }
    return orElse();
  }
}

abstract class ServiceUnavailable implements NetworkException {
  const factory ServiceUnavailable(
      {final int statusCode,
      final ErrorBean? error}) = _$ServiceUnavailableImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$ServiceUnavailableImplCopyWith<_$ServiceUnavailableImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$GatewayTimeoutImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$GatewayTimeoutImplCopyWith(_$GatewayTimeoutImpl value,
          $Res Function(_$GatewayTimeoutImpl) then) =
      __$$GatewayTimeoutImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$GatewayTimeoutImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$GatewayTimeoutImpl>
    implements _$$GatewayTimeoutImplCopyWith<$Res> {
  __$$GatewayTimeoutImplCopyWithImpl(
      _$GatewayTimeoutImpl _value, $Res Function(_$GatewayTimeoutImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$GatewayTimeoutImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$GatewayTimeoutImpl implements GatewayTimeout {
  const _$GatewayTimeoutImpl(
      {this.statusCode = HttpResponseCode.gatewayTimeout, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.gatewayTimeout(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$GatewayTimeoutImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$GatewayTimeoutImplCopyWith<_$GatewayTimeoutImpl> get copyWith =>
      __$$GatewayTimeoutImplCopyWithImpl<_$GatewayTimeoutImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return gatewayTimeout(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return gatewayTimeout?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (gatewayTimeout != null) {
      return gatewayTimeout(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return gatewayTimeout(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return gatewayTimeout?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (gatewayTimeout != null) {
      return gatewayTimeout(this);
    }
    return orElse();
  }
}

abstract class GatewayTimeout implements NetworkException {
  const factory GatewayTimeout({final int statusCode, final ErrorBean? error}) =
      _$GatewayTimeoutImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$GatewayTimeoutImplCopyWith<_$GatewayTimeoutImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$HttpVersionNotSupportedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$HttpVersionNotSupportedImplCopyWith(
          _$HttpVersionNotSupportedImpl value,
          $Res Function(_$HttpVersionNotSupportedImpl) then) =
      __$$HttpVersionNotSupportedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$HttpVersionNotSupportedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$HttpVersionNotSupportedImpl>
    implements _$$HttpVersionNotSupportedImplCopyWith<$Res> {
  __$$HttpVersionNotSupportedImplCopyWithImpl(
      _$HttpVersionNotSupportedImpl _value,
      $Res Function(_$HttpVersionNotSupportedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$HttpVersionNotSupportedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$HttpVersionNotSupportedImpl implements HttpVersionNotSupported {
  const _$HttpVersionNotSupportedImpl(
      {this.statusCode = HttpResponseCode.httpVersionNotSupported, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.httpVersionNotSupported(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$HttpVersionNotSupportedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$HttpVersionNotSupportedImplCopyWith<_$HttpVersionNotSupportedImpl>
      get copyWith => __$$HttpVersionNotSupportedImplCopyWithImpl<
          _$HttpVersionNotSupportedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return httpVersionNotSupported(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return httpVersionNotSupported?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (httpVersionNotSupported != null) {
      return httpVersionNotSupported(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return httpVersionNotSupported(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return httpVersionNotSupported?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (httpVersionNotSupported != null) {
      return httpVersionNotSupported(this);
    }
    return orElse();
  }
}

abstract class HttpVersionNotSupported implements NetworkException {
  const factory HttpVersionNotSupported(
      {final int statusCode,
      final ErrorBean? error}) = _$HttpVersionNotSupportedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$HttpVersionNotSupportedImplCopyWith<_$HttpVersionNotSupportedImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$InsufficientStorageImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$InsufficientStorageImplCopyWith(_$InsufficientStorageImpl value,
          $Res Function(_$InsufficientStorageImpl) then) =
      __$$InsufficientStorageImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$InsufficientStorageImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$InsufficientStorageImpl>
    implements _$$InsufficientStorageImplCopyWith<$Res> {
  __$$InsufficientStorageImplCopyWithImpl(_$InsufficientStorageImpl _value,
      $Res Function(_$InsufficientStorageImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$InsufficientStorageImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$InsufficientStorageImpl implements InsufficientStorage {
  const _$InsufficientStorageImpl(
      {this.statusCode = HttpResponseCode.insufficientStorage, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.insufficientStorage(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$InsufficientStorageImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$InsufficientStorageImplCopyWith<_$InsufficientStorageImpl> get copyWith =>
      __$$InsufficientStorageImplCopyWithImpl<_$InsufficientStorageImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return insufficientStorage(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return insufficientStorage?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (insufficientStorage != null) {
      return insufficientStorage(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return insufficientStorage(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return insufficientStorage?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (insufficientStorage != null) {
      return insufficientStorage(this);
    }
    return orElse();
  }
}

abstract class InsufficientStorage implements NetworkException {
  const factory InsufficientStorage(
      {final int statusCode,
      final ErrorBean? error}) = _$InsufficientStorageImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$InsufficientStorageImplCopyWith<_$InsufficientStorageImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$LoopDetectedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$LoopDetectedImplCopyWith(
          _$LoopDetectedImpl value, $Res Function(_$LoopDetectedImpl) then) =
      __$$LoopDetectedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$LoopDetectedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$LoopDetectedImpl>
    implements _$$LoopDetectedImplCopyWith<$Res> {
  __$$LoopDetectedImplCopyWithImpl(
      _$LoopDetectedImpl _value, $Res Function(_$LoopDetectedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$LoopDetectedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$LoopDetectedImpl implements LoopDetected {
  const _$LoopDetectedImpl(
      {this.statusCode = HttpResponseCode.loopDetected, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.loopDetected(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$LoopDetectedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$LoopDetectedImplCopyWith<_$LoopDetectedImpl> get copyWith =>
      __$$LoopDetectedImplCopyWithImpl<_$LoopDetectedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return loopDetected(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return loopDetected?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (loopDetected != null) {
      return loopDetected(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return loopDetected(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return loopDetected?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (loopDetected != null) {
      return loopDetected(this);
    }
    return orElse();
  }
}

abstract class LoopDetected implements NetworkException {
  const factory LoopDetected({final int statusCode, final ErrorBean? error}) =
      _$LoopDetectedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$LoopDetectedImplCopyWith<_$LoopDetectedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$BandwidthLimitExceededImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$BandwidthLimitExceededImplCopyWith(
          _$BandwidthLimitExceededImpl value,
          $Res Function(_$BandwidthLimitExceededImpl) then) =
      __$$BandwidthLimitExceededImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$BandwidthLimitExceededImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$BandwidthLimitExceededImpl>
    implements _$$BandwidthLimitExceededImplCopyWith<$Res> {
  __$$BandwidthLimitExceededImplCopyWithImpl(
      _$BandwidthLimitExceededImpl _value,
      $Res Function(_$BandwidthLimitExceededImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$BandwidthLimitExceededImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$BandwidthLimitExceededImpl implements BandwidthLimitExceeded {
  const _$BandwidthLimitExceededImpl(
      {this.statusCode = HttpResponseCode.bandwidthLimitExceeded, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.bandwidthLimitExceeded(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BandwidthLimitExceededImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$BandwidthLimitExceededImplCopyWith<_$BandwidthLimitExceededImpl>
      get copyWith => __$$BandwidthLimitExceededImplCopyWithImpl<
          _$BandwidthLimitExceededImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return bandwidthLimitExceeded(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return bandwidthLimitExceeded?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (bandwidthLimitExceeded != null) {
      return bandwidthLimitExceeded(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return bandwidthLimitExceeded(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return bandwidthLimitExceeded?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (bandwidthLimitExceeded != null) {
      return bandwidthLimitExceeded(this);
    }
    return orElse();
  }
}

abstract class BandwidthLimitExceeded implements NetworkException {
  const factory BandwidthLimitExceeded(
      {final int statusCode,
      final ErrorBean? error}) = _$BandwidthLimitExceededImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$BandwidthLimitExceededImplCopyWith<_$BandwidthLimitExceededImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NotExtendedImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NotExtendedImplCopyWith(
          _$NotExtendedImpl value, $Res Function(_$NotExtendedImpl) then) =
      __$$NotExtendedImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NotExtendedImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NotExtendedImpl>
    implements _$$NotExtendedImplCopyWith<$Res> {
  __$$NotExtendedImplCopyWithImpl(
      _$NotExtendedImpl _value, $Res Function(_$NotExtendedImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NotExtendedImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NotExtendedImpl implements NotExtended {
  const _$NotExtendedImpl(
      {this.statusCode = HttpResponseCode.notExtended, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.notExtended(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NotExtendedImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NotExtendedImplCopyWith<_$NotExtendedImpl> get copyWith =>
      __$$NotExtendedImplCopyWithImpl<_$NotExtendedImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return notExtended(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return notExtended?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (notExtended != null) {
      return notExtended(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return notExtended(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return notExtended?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (notExtended != null) {
      return notExtended(this);
    }
    return orElse();
  }
}

abstract class NotExtended implements NetworkException {
  const factory NotExtended({final int statusCode, final ErrorBean? error}) =
      _$NotExtendedImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NotExtendedImplCopyWith<_$NotExtendedImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NetworkAuthenticationRequiredImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NetworkAuthenticationRequiredImplCopyWith(
          _$NetworkAuthenticationRequiredImpl value,
          $Res Function(_$NetworkAuthenticationRequiredImpl) then) =
      __$$NetworkAuthenticationRequiredImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NetworkAuthenticationRequiredImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res,
        _$NetworkAuthenticationRequiredImpl>
    implements _$$NetworkAuthenticationRequiredImplCopyWith<$Res> {
  __$$NetworkAuthenticationRequiredImplCopyWithImpl(
      _$NetworkAuthenticationRequiredImpl _value,
      $Res Function(_$NetworkAuthenticationRequiredImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NetworkAuthenticationRequiredImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NetworkAuthenticationRequiredImpl
    implements NetworkAuthenticationRequired {
  const _$NetworkAuthenticationRequiredImpl(
      {this.statusCode = HttpResponseCode.networkAuthenticationRequired,
      this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.networkAuthenticationRequired(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NetworkAuthenticationRequiredImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NetworkAuthenticationRequiredImplCopyWith<
          _$NetworkAuthenticationRequiredImpl>
      get copyWith => __$$NetworkAuthenticationRequiredImplCopyWithImpl<
          _$NetworkAuthenticationRequiredImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return networkAuthenticationRequired(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return networkAuthenticationRequired?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (networkAuthenticationRequired != null) {
      return networkAuthenticationRequired(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return networkAuthenticationRequired(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return networkAuthenticationRequired?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (networkAuthenticationRequired != null) {
      return networkAuthenticationRequired(this);
    }
    return orElse();
  }
}

abstract class NetworkAuthenticationRequired implements NetworkException {
  const factory NetworkAuthenticationRequired(
      {final int statusCode,
      final ErrorBean? error}) = _$NetworkAuthenticationRequiredImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NetworkAuthenticationRequiredImplCopyWith<
          _$NetworkAuthenticationRequiredImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NetworkReadTimeoutErrorImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NetworkReadTimeoutErrorImplCopyWith(
          _$NetworkReadTimeoutErrorImpl value,
          $Res Function(_$NetworkReadTimeoutErrorImpl) then) =
      __$$NetworkReadTimeoutErrorImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NetworkReadTimeoutErrorImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NetworkReadTimeoutErrorImpl>
    implements _$$NetworkReadTimeoutErrorImplCopyWith<$Res> {
  __$$NetworkReadTimeoutErrorImplCopyWithImpl(
      _$NetworkReadTimeoutErrorImpl _value,
      $Res Function(_$NetworkReadTimeoutErrorImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NetworkReadTimeoutErrorImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NetworkReadTimeoutErrorImpl implements NetworkReadTimeoutError {
  const _$NetworkReadTimeoutErrorImpl(
      {this.statusCode = HttpResponseCode.networkReadTimeoutError, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.networkReadTimeoutError(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NetworkReadTimeoutErrorImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NetworkReadTimeoutErrorImplCopyWith<_$NetworkReadTimeoutErrorImpl>
      get copyWith => __$$NetworkReadTimeoutErrorImplCopyWithImpl<
          _$NetworkReadTimeoutErrorImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return networkReadTimeoutError(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return networkReadTimeoutError?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (networkReadTimeoutError != null) {
      return networkReadTimeoutError(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return networkReadTimeoutError(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return networkReadTimeoutError?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (networkReadTimeoutError != null) {
      return networkReadTimeoutError(this);
    }
    return orElse();
  }
}

abstract class NetworkReadTimeoutError implements NetworkException {
  const factory NetworkReadTimeoutError(
      {final int statusCode,
      final ErrorBean? error}) = _$NetworkReadTimeoutErrorImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NetworkReadTimeoutErrorImplCopyWith<_$NetworkReadTimeoutErrorImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NetworkConnectTimeoutErrorImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NetworkConnectTimeoutErrorImplCopyWith(
          _$NetworkConnectTimeoutErrorImpl value,
          $Res Function(_$NetworkConnectTimeoutErrorImpl) then) =
      __$$NetworkConnectTimeoutErrorImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NetworkConnectTimeoutErrorImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res,
        _$NetworkConnectTimeoutErrorImpl>
    implements _$$NetworkConnectTimeoutErrorImplCopyWith<$Res> {
  __$$NetworkConnectTimeoutErrorImplCopyWithImpl(
      _$NetworkConnectTimeoutErrorImpl _value,
      $Res Function(_$NetworkConnectTimeoutErrorImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NetworkConnectTimeoutErrorImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NetworkConnectTimeoutErrorImpl implements NetworkConnectTimeoutError {
  const _$NetworkConnectTimeoutErrorImpl(
      {this.statusCode = HttpResponseCode.networkConnectTimeoutError,
      this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.networkConnectTimeoutError(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NetworkConnectTimeoutErrorImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NetworkConnectTimeoutErrorImplCopyWith<_$NetworkConnectTimeoutErrorImpl>
      get copyWith => __$$NetworkConnectTimeoutErrorImplCopyWithImpl<
          _$NetworkConnectTimeoutErrorImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return networkConnectTimeoutError(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return networkConnectTimeoutError?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (networkConnectTimeoutError != null) {
      return networkConnectTimeoutError(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return networkConnectTimeoutError(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return networkConnectTimeoutError?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (networkConnectTimeoutError != null) {
      return networkConnectTimeoutError(this);
    }
    return orElse();
  }
}

abstract class NetworkConnectTimeoutError implements NetworkException {
  const factory NetworkConnectTimeoutError(
      {final int statusCode,
      final ErrorBean? error}) = _$NetworkConnectTimeoutErrorImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NetworkConnectTimeoutErrorImplCopyWith<_$NetworkConnectTimeoutErrorImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$FormatExceptionImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$FormatExceptionImplCopyWith(_$FormatExceptionImpl value,
          $Res Function(_$FormatExceptionImpl) then) =
      __$$FormatExceptionImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$FormatExceptionImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$FormatExceptionImpl>
    implements _$$FormatExceptionImplCopyWith<$Res> {
  __$$FormatExceptionImplCopyWithImpl(
      _$FormatExceptionImpl _value, $Res Function(_$FormatExceptionImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$FormatExceptionImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$FormatExceptionImpl implements FormatException {
  const _$FormatExceptionImpl({this.statusCode = 001, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.formatException(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FormatExceptionImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$FormatExceptionImplCopyWith<_$FormatExceptionImpl> get copyWith =>
      __$$FormatExceptionImplCopyWithImpl<_$FormatExceptionImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return formatException(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return formatException?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (formatException != null) {
      return formatException(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return formatException(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return formatException?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (formatException != null) {
      return formatException(this);
    }
    return orElse();
  }
}

abstract class FormatException implements NetworkException {
  const factory FormatException(
      {final int statusCode, final ErrorBean? error}) = _$FormatExceptionImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$FormatExceptionImplCopyWith<_$FormatExceptionImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UnableToProcessImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UnableToProcessImplCopyWith(_$UnableToProcessImpl value,
          $Res Function(_$UnableToProcessImpl) then) =
      __$$UnableToProcessImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UnableToProcessImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$UnableToProcessImpl>
    implements _$$UnableToProcessImplCopyWith<$Res> {
  __$$UnableToProcessImplCopyWithImpl(
      _$UnableToProcessImpl _value, $Res Function(_$UnableToProcessImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UnableToProcessImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UnableToProcessImpl implements UnableToProcess {
  const _$UnableToProcessImpl({this.statusCode = 002, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.unableToProcess(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UnableToProcessImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UnableToProcessImplCopyWith<_$UnableToProcessImpl> get copyWith =>
      __$$UnableToProcessImplCopyWithImpl<_$UnableToProcessImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return unableToProcess(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return unableToProcess?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (unableToProcess != null) {
      return unableToProcess(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return unableToProcess(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return unableToProcess?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (unableToProcess != null) {
      return unableToProcess(this);
    }
    return orElse();
  }
}

abstract class UnableToProcess implements NetworkException {
  const factory UnableToProcess(
      {final int statusCode, final ErrorBean? error}) = _$UnableToProcessImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UnableToProcessImplCopyWith<_$UnableToProcessImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$UnexpectedErrorImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$UnexpectedErrorImplCopyWith(_$UnexpectedErrorImpl value,
          $Res Function(_$UnexpectedErrorImpl) then) =
      __$$UnexpectedErrorImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$UnexpectedErrorImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$UnexpectedErrorImpl>
    implements _$$UnexpectedErrorImplCopyWith<$Res> {
  __$$UnexpectedErrorImplCopyWithImpl(
      _$UnexpectedErrorImpl _value, $Res Function(_$UnexpectedErrorImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$UnexpectedErrorImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$UnexpectedErrorImpl implements UnexpectedError {
  const _$UnexpectedErrorImpl({this.statusCode = 003, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.unexpectedError(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$UnexpectedErrorImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$UnexpectedErrorImplCopyWith<_$UnexpectedErrorImpl> get copyWith =>
      __$$UnexpectedErrorImplCopyWithImpl<_$UnexpectedErrorImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return unexpectedError(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return unexpectedError?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (unexpectedError != null) {
      return unexpectedError(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return unexpectedError(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return unexpectedError?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (unexpectedError != null) {
      return unexpectedError(this);
    }
    return orElse();
  }
}

abstract class UnexpectedError implements NetworkException {
  const factory UnexpectedError(
      {final int statusCode, final ErrorBean? error}) = _$UnexpectedErrorImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$UnexpectedErrorImplCopyWith<_$UnexpectedErrorImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SendTimeoutImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$SendTimeoutImplCopyWith(
          _$SendTimeoutImpl value, $Res Function(_$SendTimeoutImpl) then) =
      __$$SendTimeoutImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$SendTimeoutImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$SendTimeoutImpl>
    implements _$$SendTimeoutImplCopyWith<$Res> {
  __$$SendTimeoutImplCopyWithImpl(
      _$SendTimeoutImpl _value, $Res Function(_$SendTimeoutImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$SendTimeoutImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$SendTimeoutImpl implements SendTimeout {
  const _$SendTimeoutImpl({this.statusCode = 004, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.sendTimeout(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SendTimeoutImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$SendTimeoutImplCopyWith<_$SendTimeoutImpl> get copyWith =>
      __$$SendTimeoutImplCopyWithImpl<_$SendTimeoutImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return sendTimeout(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return sendTimeout?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (sendTimeout != null) {
      return sendTimeout(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return sendTimeout(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return sendTimeout?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (sendTimeout != null) {
      return sendTimeout(this);
    }
    return orElse();
  }
}

abstract class SendTimeout implements NetworkException {
  const factory SendTimeout({final int statusCode, final ErrorBean? error}) =
      _$SendTimeoutImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$SendTimeoutImplCopyWith<_$SendTimeoutImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NoInternetConnectionImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$NoInternetConnectionImplCopyWith(_$NoInternetConnectionImpl value,
          $Res Function(_$NoInternetConnectionImpl) then) =
      __$$NoInternetConnectionImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$NoInternetConnectionImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$NoInternetConnectionImpl>
    implements _$$NoInternetConnectionImplCopyWith<$Res> {
  __$$NoInternetConnectionImplCopyWithImpl(_$NoInternetConnectionImpl _value,
      $Res Function(_$NoInternetConnectionImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$NoInternetConnectionImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$NoInternetConnectionImpl implements NoInternetConnection {
  const _$NoInternetConnectionImpl({this.statusCode = 005, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.noInternetConnection(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NoInternetConnectionImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$NoInternetConnectionImplCopyWith<_$NoInternetConnectionImpl>
      get copyWith =>
          __$$NoInternetConnectionImplCopyWithImpl<_$NoInternetConnectionImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return noInternetConnection(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return noInternetConnection?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (noInternetConnection != null) {
      return noInternetConnection(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return noInternetConnection(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return noInternetConnection?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (noInternetConnection != null) {
      return noInternetConnection(this);
    }
    return orElse();
  }
}

abstract class NoInternetConnection implements NetworkException {
  const factory NoInternetConnection(
      {final int statusCode,
      final ErrorBean? error}) = _$NoInternetConnectionImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$NoInternetConnectionImplCopyWith<_$NoInternetConnectionImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RequestCancelledImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$RequestCancelledImplCopyWith(_$RequestCancelledImpl value,
          $Res Function(_$RequestCancelledImpl) then) =
      __$$RequestCancelledImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$RequestCancelledImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$RequestCancelledImpl>
    implements _$$RequestCancelledImplCopyWith<$Res> {
  __$$RequestCancelledImplCopyWithImpl(_$RequestCancelledImpl _value,
      $Res Function(_$RequestCancelledImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$RequestCancelledImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$RequestCancelledImpl implements RequestCancelled {
  const _$RequestCancelledImpl({this.statusCode = 006, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.requestCancelled(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RequestCancelledImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$RequestCancelledImplCopyWith<_$RequestCancelledImpl> get copyWith =>
      __$$RequestCancelledImplCopyWithImpl<_$RequestCancelledImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return requestCancelled(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return requestCancelled?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestCancelled != null) {
      return requestCancelled(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return requestCancelled(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return requestCancelled?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (requestCancelled != null) {
      return requestCancelled(this);
    }
    return orElse();
  }
}

abstract class RequestCancelled implements NetworkException {
  const factory RequestCancelled(
      {final int statusCode, final ErrorBean? error}) = _$RequestCancelledImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$RequestCancelledImplCopyWith<_$RequestCancelledImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$BadCertificateImplCopyWith<$Res>
    implements $NetworkExceptionCopyWith<$Res> {
  factory _$$BadCertificateImplCopyWith(_$BadCertificateImpl value,
          $Res Function(_$BadCertificateImpl) then) =
      __$$BadCertificateImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({int statusCode, ErrorBean? error});

  @override
  $ErrorBeanCopyWith<$Res>? get error;
}

/// @nodoc
class __$$BadCertificateImplCopyWithImpl<$Res>
    extends _$NetworkExceptionCopyWithImpl<$Res, _$BadCertificateImpl>
    implements _$$BadCertificateImplCopyWith<$Res> {
  __$$BadCertificateImplCopyWithImpl(
      _$BadCertificateImpl _value, $Res Function(_$BadCertificateImpl) _then)
      : super(_value, _then);

  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? statusCode = null,
    Object? error = freezed,
  }) {
    return _then(_$BadCertificateImpl(
      statusCode: null == statusCode
          ? _value.statusCode
          : statusCode // ignore: cast_nullable_to_non_nullable
              as int,
      error: freezed == error
          ? _value.error
          : error // ignore: cast_nullable_to_non_nullable
              as ErrorBean?,
    ));
  }
}

/// @nodoc

class _$BadCertificateImpl implements BadCertificate {
  const _$BadCertificateImpl(
      {this.statusCode = HttpResponseCode.badCertificateError, this.error});

  @override
  @JsonKey()
  final int statusCode;
  @override
  final ErrorBean? error;

  @override
  String toString() {
    return 'NetworkException.badCertificate(statusCode: $statusCode, error: $error)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$BadCertificateImpl &&
            (identical(other.statusCode, statusCode) ||
                other.statusCode == statusCode) &&
            (identical(other.error, error) || other.error == error));
  }

  @override
  int get hashCode => Object.hash(runtimeType, statusCode, error);

  @JsonKey(ignore: true)
  @override
  @pragma('vm:prefer-inline')
  _$$BadCertificateImplCopyWith<_$BadCertificateImpl> get copyWith =>
      __$$BadCertificateImplCopyWithImpl<_$BadCertificateImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(int statusCode, ErrorBean? error) defaultError,
    required TResult Function(int statusCode, ErrorBean? error)
        movedPermanently,
    required TResult Function(int statusCode, ErrorBean? error) found,
    required TResult Function(int statusCode, ErrorBean? error)
        movedTemporarily,
    required TResult Function(int statusCode, ErrorBean? error) notModified,
    required TResult Function(int statusCode, ErrorBean? error) useProxy,
    required TResult Function(int statusCode, ErrorBean? error)
        temporaryRedirect,
    required TResult Function(int statusCode, ErrorBean? error)
        permanentRedirect,
    required TResult Function(int statusCode, ErrorBean? error) badRequest,
    required TResult Function(int statusCode, ErrorBean? error) unauthorized,
    required TResult Function(int statusCode, ErrorBean? error) forbidden,
    required TResult Function(int statusCode, ErrorBean? error) notFound,
    required TResult Function(int statusCode, ErrorBean? error)
        methodNotAllowed,
    required TResult Function(int statusCode, ErrorBean? error) notAcceptable,
    required TResult Function(int statusCode, ErrorBean? error)
        proxyAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error) requestTimeout,
    required TResult Function(int statusCode, ErrorBean? error) conflict,
    required TResult Function(int statusCode, ErrorBean? error) lengthRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        requestEntityTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        requestUriTooLong,
    required TResult Function(int statusCode, ErrorBean? error)
        unsupportedMediaType,
    required TResult Function(int statusCode, ErrorBean? error)
        expectationFailed,
    required TResult Function(int statusCode, ErrorBean? error) locked,
    required TResult Function(int statusCode, ErrorBean? error) upgradeRequired,
    required TResult Function(int statusCode, ErrorBean? error) tooManyRequests,
    required TResult Function(int statusCode, ErrorBean? error)
        requestHeaderFieldsTooLarge,
    required TResult Function(int statusCode, ErrorBean? error)
        unavailableForLegalReasons,
    required TResult Function(int statusCode, ErrorBean? error)
        clientClosedRequest,
    required TResult Function(int statusCode, ErrorBean? error)
        internalServerError,
    required TResult Function(int statusCode, ErrorBean? error) notImplemented,
    required TResult Function(int statusCode, ErrorBean? error) badGateway,
    required TResult Function(int statusCode, ErrorBean? error)
        serviceUnavailable,
    required TResult Function(int statusCode, ErrorBean? error) gatewayTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        httpVersionNotSupported,
    required TResult Function(int statusCode, ErrorBean? error)
        insufficientStorage,
    required TResult Function(int statusCode, ErrorBean? error) loopDetected,
    required TResult Function(int statusCode, ErrorBean? error)
        bandwidthLimitExceeded,
    required TResult Function(int statusCode, ErrorBean? error) notExtended,
    required TResult Function(int statusCode, ErrorBean? error)
        networkAuthenticationRequired,
    required TResult Function(int statusCode, ErrorBean? error)
        networkReadTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error)
        networkConnectTimeoutError,
    required TResult Function(int statusCode, ErrorBean? error) formatException,
    required TResult Function(int statusCode, ErrorBean? error) unableToProcess,
    required TResult Function(int statusCode, ErrorBean? error) unexpectedError,
    required TResult Function(int statusCode, ErrorBean? error) sendTimeout,
    required TResult Function(int statusCode, ErrorBean? error)
        noInternetConnection,
    required TResult Function(int statusCode, ErrorBean? error)
        requestCancelled,
    required TResult Function(int statusCode, ErrorBean? error) badCertificate,
  }) {
    return badCertificate(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(int statusCode, ErrorBean? error)? defaultError,
    TResult? Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult? Function(int statusCode, ErrorBean? error)? found,
    TResult? Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult? Function(int statusCode, ErrorBean? error)? notModified,
    TResult? Function(int statusCode, ErrorBean? error)? useProxy,
    TResult? Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult? Function(int statusCode, ErrorBean? error)? badRequest,
    TResult? Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult? Function(int statusCode, ErrorBean? error)? forbidden,
    TResult? Function(int statusCode, ErrorBean? error)? notFound,
    TResult? Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult? Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult? Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? conflict,
    TResult? Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult? Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult? Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult? Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult? Function(int statusCode, ErrorBean? error)? locked,
    TResult? Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult? Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult? Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult? Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult? Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult? Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult? Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult? Function(int statusCode, ErrorBean? error)? badGateway,
    TResult? Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult? Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult? Function(int statusCode, ErrorBean? error)?
        httpVersionNotSupported,
    TResult? Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult? Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult? Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult? Function(int statusCode, ErrorBean? error)? notExtended,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkReadTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult? Function(int statusCode, ErrorBean? error)? formatException,
    TResult? Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult? Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult? Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult? Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult? Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult? Function(int statusCode, ErrorBean? error)? badCertificate,
  }) {
    return badCertificate?.call(statusCode, error);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(int statusCode, ErrorBean? error)? defaultError,
    TResult Function(int statusCode, ErrorBean? error)? movedPermanently,
    TResult Function(int statusCode, ErrorBean? error)? found,
    TResult Function(int statusCode, ErrorBean? error)? movedTemporarily,
    TResult Function(int statusCode, ErrorBean? error)? notModified,
    TResult Function(int statusCode, ErrorBean? error)? useProxy,
    TResult Function(int statusCode, ErrorBean? error)? temporaryRedirect,
    TResult Function(int statusCode, ErrorBean? error)? permanentRedirect,
    TResult Function(int statusCode, ErrorBean? error)? badRequest,
    TResult Function(int statusCode, ErrorBean? error)? unauthorized,
    TResult Function(int statusCode, ErrorBean? error)? forbidden,
    TResult Function(int statusCode, ErrorBean? error)? notFound,
    TResult Function(int statusCode, ErrorBean? error)? methodNotAllowed,
    TResult Function(int statusCode, ErrorBean? error)? notAcceptable,
    TResult Function(int statusCode, ErrorBean? error)?
        proxyAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestTimeout,
    TResult Function(int statusCode, ErrorBean? error)? conflict,
    TResult Function(int statusCode, ErrorBean? error)? lengthRequired,
    TResult Function(int statusCode, ErrorBean? error)? requestEntityTooLarge,
    TResult Function(int statusCode, ErrorBean? error)? requestUriTooLong,
    TResult Function(int statusCode, ErrorBean? error)? unsupportedMediaType,
    TResult Function(int statusCode, ErrorBean? error)? expectationFailed,
    TResult Function(int statusCode, ErrorBean? error)? locked,
    TResult Function(int statusCode, ErrorBean? error)? upgradeRequired,
    TResult Function(int statusCode, ErrorBean? error)? tooManyRequests,
    TResult Function(int statusCode, ErrorBean? error)?
        requestHeaderFieldsTooLarge,
    TResult Function(int statusCode, ErrorBean? error)?
        unavailableForLegalReasons,
    TResult Function(int statusCode, ErrorBean? error)? clientClosedRequest,
    TResult Function(int statusCode, ErrorBean? error)? internalServerError,
    TResult Function(int statusCode, ErrorBean? error)? notImplemented,
    TResult Function(int statusCode, ErrorBean? error)? badGateway,
    TResult Function(int statusCode, ErrorBean? error)? serviceUnavailable,
    TResult Function(int statusCode, ErrorBean? error)? gatewayTimeout,
    TResult Function(int statusCode, ErrorBean? error)? httpVersionNotSupported,
    TResult Function(int statusCode, ErrorBean? error)? insufficientStorage,
    TResult Function(int statusCode, ErrorBean? error)? loopDetected,
    TResult Function(int statusCode, ErrorBean? error)? bandwidthLimitExceeded,
    TResult Function(int statusCode, ErrorBean? error)? notExtended,
    TResult Function(int statusCode, ErrorBean? error)?
        networkAuthenticationRequired,
    TResult Function(int statusCode, ErrorBean? error)? networkReadTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)?
        networkConnectTimeoutError,
    TResult Function(int statusCode, ErrorBean? error)? formatException,
    TResult Function(int statusCode, ErrorBean? error)? unableToProcess,
    TResult Function(int statusCode, ErrorBean? error)? unexpectedError,
    TResult Function(int statusCode, ErrorBean? error)? sendTimeout,
    TResult Function(int statusCode, ErrorBean? error)? noInternetConnection,
    TResult Function(int statusCode, ErrorBean? error)? requestCancelled,
    TResult Function(int statusCode, ErrorBean? error)? badCertificate,
    required TResult orElse(),
  }) {
    if (badCertificate != null) {
      return badCertificate(statusCode, error);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(DefaultError value) defaultError,
    required TResult Function(MovedPermanently value) movedPermanently,
    required TResult Function(Found value) found,
    required TResult Function(MovedTemporarily value) movedTemporarily,
    required TResult Function(NotModified value) notModified,
    required TResult Function(UseProxy value) useProxy,
    required TResult Function(TemporaryRedirect value) temporaryRedirect,
    required TResult Function(PermanentRedirect value) permanentRedirect,
    required TResult Function(BadRequest value) badRequest,
    required TResult Function(Unauthorized value) unauthorized,
    required TResult Function(Forbidden value) forbidden,
    required TResult Function(NotFound value) notFound,
    required TResult Function(MethodNotAllowed value) methodNotAllowed,
    required TResult Function(NotAcceptable value) notAcceptable,
    required TResult Function(ProxyAuthenticationRequired value)
        proxyAuthenticationRequired,
    required TResult Function(RequestTimeout value) requestTimeout,
    required TResult Function(Conflict value) conflict,
    required TResult Function(LengthRequired value) lengthRequired,
    required TResult Function(RequestEntityTooLarge value)
        requestEntityTooLarge,
    required TResult Function(RequestUriTooLong value) requestUriTooLong,
    required TResult Function(UnsupportedMediaType value) unsupportedMediaType,
    required TResult Function(ExpectationFailed value) expectationFailed,
    required TResult Function(Locked value) locked,
    required TResult Function(UpgradeRequired value) upgradeRequired,
    required TResult Function(TooManyRequests value) tooManyRequests,
    required TResult Function(RequestHeaderFieldsTooLarge value)
        requestHeaderFieldsTooLarge,
    required TResult Function(UnavailableForLegalReasons value)
        unavailableForLegalReasons,
    required TResult Function(ClientClosedRequest value) clientClosedRequest,
    required TResult Function(InternalServerError value) internalServerError,
    required TResult Function(NotImplemented value) notImplemented,
    required TResult Function(BadGateway value) badGateway,
    required TResult Function(ServiceUnavailable value) serviceUnavailable,
    required TResult Function(GatewayTimeout value) gatewayTimeout,
    required TResult Function(HttpVersionNotSupported value)
        httpVersionNotSupported,
    required TResult Function(InsufficientStorage value) insufficientStorage,
    required TResult Function(LoopDetected value) loopDetected,
    required TResult Function(BandwidthLimitExceeded value)
        bandwidthLimitExceeded,
    required TResult Function(NotExtended value) notExtended,
    required TResult Function(NetworkAuthenticationRequired value)
        networkAuthenticationRequired,
    required TResult Function(NetworkReadTimeoutError value)
        networkReadTimeoutError,
    required TResult Function(NetworkConnectTimeoutError value)
        networkConnectTimeoutError,
    required TResult Function(FormatException value) formatException,
    required TResult Function(UnableToProcess value) unableToProcess,
    required TResult Function(UnexpectedError value) unexpectedError,
    required TResult Function(SendTimeout value) sendTimeout,
    required TResult Function(NoInternetConnection value) noInternetConnection,
    required TResult Function(RequestCancelled value) requestCancelled,
    required TResult Function(BadCertificate value) badCertificate,
  }) {
    return badCertificate(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(DefaultError value)? defaultError,
    TResult? Function(MovedPermanently value)? movedPermanently,
    TResult? Function(Found value)? found,
    TResult? Function(MovedTemporarily value)? movedTemporarily,
    TResult? Function(NotModified value)? notModified,
    TResult? Function(UseProxy value)? useProxy,
    TResult? Function(TemporaryRedirect value)? temporaryRedirect,
    TResult? Function(PermanentRedirect value)? permanentRedirect,
    TResult? Function(BadRequest value)? badRequest,
    TResult? Function(Unauthorized value)? unauthorized,
    TResult? Function(Forbidden value)? forbidden,
    TResult? Function(NotFound value)? notFound,
    TResult? Function(MethodNotAllowed value)? methodNotAllowed,
    TResult? Function(NotAcceptable value)? notAcceptable,
    TResult? Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult? Function(RequestTimeout value)? requestTimeout,
    TResult? Function(Conflict value)? conflict,
    TResult? Function(LengthRequired value)? lengthRequired,
    TResult? Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult? Function(RequestUriTooLong value)? requestUriTooLong,
    TResult? Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult? Function(ExpectationFailed value)? expectationFailed,
    TResult? Function(Locked value)? locked,
    TResult? Function(UpgradeRequired value)? upgradeRequired,
    TResult? Function(TooManyRequests value)? tooManyRequests,
    TResult? Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult? Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult? Function(ClientClosedRequest value)? clientClosedRequest,
    TResult? Function(InternalServerError value)? internalServerError,
    TResult? Function(NotImplemented value)? notImplemented,
    TResult? Function(BadGateway value)? badGateway,
    TResult? Function(ServiceUnavailable value)? serviceUnavailable,
    TResult? Function(GatewayTimeout value)? gatewayTimeout,
    TResult? Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult? Function(InsufficientStorage value)? insufficientStorage,
    TResult? Function(LoopDetected value)? loopDetected,
    TResult? Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult? Function(NotExtended value)? notExtended,
    TResult? Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult? Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult? Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult? Function(FormatException value)? formatException,
    TResult? Function(UnableToProcess value)? unableToProcess,
    TResult? Function(UnexpectedError value)? unexpectedError,
    TResult? Function(SendTimeout value)? sendTimeout,
    TResult? Function(NoInternetConnection value)? noInternetConnection,
    TResult? Function(RequestCancelled value)? requestCancelled,
    TResult? Function(BadCertificate value)? badCertificate,
  }) {
    return badCertificate?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(DefaultError value)? defaultError,
    TResult Function(MovedPermanently value)? movedPermanently,
    TResult Function(Found value)? found,
    TResult Function(MovedTemporarily value)? movedTemporarily,
    TResult Function(NotModified value)? notModified,
    TResult Function(UseProxy value)? useProxy,
    TResult Function(TemporaryRedirect value)? temporaryRedirect,
    TResult Function(PermanentRedirect value)? permanentRedirect,
    TResult Function(BadRequest value)? badRequest,
    TResult Function(Unauthorized value)? unauthorized,
    TResult Function(Forbidden value)? forbidden,
    TResult Function(NotFound value)? notFound,
    TResult Function(MethodNotAllowed value)? methodNotAllowed,
    TResult Function(NotAcceptable value)? notAcceptable,
    TResult Function(ProxyAuthenticationRequired value)?
        proxyAuthenticationRequired,
    TResult Function(RequestTimeout value)? requestTimeout,
    TResult Function(Conflict value)? conflict,
    TResult Function(LengthRequired value)? lengthRequired,
    TResult Function(RequestEntityTooLarge value)? requestEntityTooLarge,
    TResult Function(RequestUriTooLong value)? requestUriTooLong,
    TResult Function(UnsupportedMediaType value)? unsupportedMediaType,
    TResult Function(ExpectationFailed value)? expectationFailed,
    TResult Function(Locked value)? locked,
    TResult Function(UpgradeRequired value)? upgradeRequired,
    TResult Function(TooManyRequests value)? tooManyRequests,
    TResult Function(RequestHeaderFieldsTooLarge value)?
        requestHeaderFieldsTooLarge,
    TResult Function(UnavailableForLegalReasons value)?
        unavailableForLegalReasons,
    TResult Function(ClientClosedRequest value)? clientClosedRequest,
    TResult Function(InternalServerError value)? internalServerError,
    TResult Function(NotImplemented value)? notImplemented,
    TResult Function(BadGateway value)? badGateway,
    TResult Function(ServiceUnavailable value)? serviceUnavailable,
    TResult Function(GatewayTimeout value)? gatewayTimeout,
    TResult Function(HttpVersionNotSupported value)? httpVersionNotSupported,
    TResult Function(InsufficientStorage value)? insufficientStorage,
    TResult Function(LoopDetected value)? loopDetected,
    TResult Function(BandwidthLimitExceeded value)? bandwidthLimitExceeded,
    TResult Function(NotExtended value)? notExtended,
    TResult Function(NetworkAuthenticationRequired value)?
        networkAuthenticationRequired,
    TResult Function(NetworkReadTimeoutError value)? networkReadTimeoutError,
    TResult Function(NetworkConnectTimeoutError value)?
        networkConnectTimeoutError,
    TResult Function(FormatException value)? formatException,
    TResult Function(UnableToProcess value)? unableToProcess,
    TResult Function(UnexpectedError value)? unexpectedError,
    TResult Function(SendTimeout value)? sendTimeout,
    TResult Function(NoInternetConnection value)? noInternetConnection,
    TResult Function(RequestCancelled value)? requestCancelled,
    TResult Function(BadCertificate value)? badCertificate,
    required TResult orElse(),
  }) {
    if (badCertificate != null) {
      return badCertificate(this);
    }
    return orElse();
  }
}

abstract class BadCertificate implements NetworkException {
  const factory BadCertificate({final int statusCode, final ErrorBean? error}) =
      _$BadCertificateImpl;

  @override
  int get statusCode;
  @override
  ErrorBean? get error;
  @override
  @JsonKey(ignore: true)
  _$$BadCertificateImplCopyWith<_$BadCertificateImpl> get copyWith =>
      throw _privateConstructorUsedError;
}
